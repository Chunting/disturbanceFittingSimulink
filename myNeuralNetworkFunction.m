function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 15-Feb-2020 15:44:26.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-10.0000000000084;-793.6000000002;-64000];
x1_step1.gain = [0.099999999999958;0.00126008064516102;1.5625e-05];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.6092376190192636543;-2.5549244286703194362;-1.422548306807465357;0.7116602948451619115;-0.49030232054583766654;-0.76464945721190902272;1.2419413897261832869;-2.6305842076137118113;-1.9893693915011669837;-3.033586480900888116];
IW1_1 = [-0.122993328861010498 -2.6127840738880618865 -0.27571866789880283832;1.4987918609485977317 -2.1381217767985973843 -1.3434828020386202496;1.8909727519107852878 2.0421446779396883464 1.0028602835833870799;-2.1135437297911767729 -1.2662920671509727555 -2.1213081395324366873;-0.21864775756902946058 2.8088018951588509253 -1.2583615112814101611;-0.84131588304132320921 1.7406720848603489671 2.410139713256033378;-0.16157683033925579474 -2.8039889588262014719 1.5882135890074957629;-2.0309282671803514653 1.4768139928963979202 -1.0634976996968685814;-2.8494852319285448594 1.0530801257833284357 -0.84877151249406945777;-0.54676954761581608722 2.0332778698426441366 1.6920892707885013539];

% Layer 2
b2 = 0.23921235393933446001;
LW2_1 = [0.72782120160692320709 0.089288121140085663363 0.0036696429602290645336 -0.061406434200233672716 0.53085516999037352104 0.11765923046141325836 0.40564058910552563963 -0.26226100430238658001 0.27045739350081826613 -0.56846130215324053303];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.361217739372512;
y1_step1.xoffset = -2.76841357368688;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
